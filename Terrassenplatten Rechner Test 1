import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Info } from 'lucide-react';

const TerrassenRechner = () => {
  // Grundlegende Eingaben
  const [laenge, setLaenge] = useState(400); // in cm
  const [breite, setBreite] = useState(300); // in cm
  const [plattenLaenge, setPlattenLaenge] = useState(40); // in cm
  const [plattenBreite, setPlattenBreite] = useState(40); // in cm
  const [fugenBreite, setFugenBreite] = useState(5); // in mm
  
  // Randsteine
  const [mitRandsteinen, setMitRandsteinen] = useState(true);
  const [randsteinLaenge, setRandsteinLaenge] = useState(100); // in cm
  
  // Randstein-Positionen
  const [randLinks, setRandLinks] = useState(true);
  const [randRechts, setRandRechts] = useState(true);
  const [randOben, setRandOben] = useState(true);
  const [randUnten, setRandUnten] = useState(true);
  
  // Optionen
  const [verschnitt, setVerschnitt] = useState(10);
  const [manuelleBerechnung, setManuelleBerechnung] = useState(false);
  const [berechnungAngefordert, setBerechnungAngefordert] = useState(false);
  
  // Berechnete Werte
  const [flaeche, setFlaeche] = useState(0);
  const [umfang, setUmfang] = useState(0);
  const [plattenAnzahl, setPlattenAnzahl] = useState(0);
  const [plattenAnzahlMitVerschnitt, setPlattenAnzahlMitVerschnitt] = useState(0);
  const [geschnittenePlatten, setGeschnittenePlatten] = useState(0);
  const [randsteineAnzahl, setRandsteineAnzahl] = useState(0);
  const [randsteineAnzahlMitVerschnitt, setRandsteineAnzahlMitVerschnitt] = useState(0);
  
  // Visualisierung
  const [plattenGrid, setPlattenGrid] = useState([]);
  
  // Berechnung durchführen
  const berechnen = () => {
    // Werte in Meter für die Berechnungen umrechnen
    const laengeM = laenge / 100;
    const breiteM = breite / 100;
    const plattenLaengeM = plattenLaenge / 100;
    const plattenBreiteM = plattenBreite / 100;
    const fugenBreiteM = fugenBreite / 1000;
    const randsteinLaengeM = randsteinLaenge / 100;
    
    // Fläche und Umfang berechnen
    const berechneteFläche = laengeM * breiteM; // Ergebnis ist korrekt in m²
    
    // Gesamter Umfang der Terrasse (unabhängig von Randsteinen)
    const gesamtUmfang = 2 * (laengeM + breiteM);
    
    // Umfang nur für Seiten mit Randsteinen berechnen
    let randsteinUmfang = 0;
    if (randLinks) randsteinUmfang += breiteM;
    if (randRechts) randsteinUmfang += breiteM;
    if (randOben) randsteinUmfang += laengeM;
    if (randUnten) randsteinUmfang += laengeM;
    
    // Korrekte Werte in m² und m setzen
    setFlaeche(berechneteFläche);
    setUmfang(gesamtUmfang);
    
    // Platten berechnen
    const effektivePlattenBreiteM = plattenBreiteM + fugenBreiteM;
    const effektivePlattenLaengeM = plattenLaengeM + fugenBreiteM;
    
    // Anzahl der Platten in X- und Y-Richtung
    const plattenX = Math.ceil(laengeM / effektivePlattenLaengeM);
    const plattenY = Math.ceil(breiteM / effektivePlattenBreiteM);
    
    const anzahlPlatten = plattenX * plattenY;
    
    // Grid für Visualisierung erstellen
    const grid = Array(plattenY).fill().map(() => Array(plattenX).fill(1));
    
    // Geschnittene Platten am Rand identifizieren
    let geschnittene = 0;
    const restX = laengeM % effektivePlattenLaengeM;
    const restY = breiteM % effektivePlattenBreiteM;
    
    if (restX > 0) {
      for (let y = 0; y < plattenY; y++) {
        grid[y][plattenX - 1] = 0.5; // markiere als geschnitten
        geschnittene++;
      }
    }
    
    if (restY > 0) {
      for (let x = 0; x < plattenX; x++) {
        if (grid[plattenY - 1][x] === 0.5) {
          grid[plattenY - 1][x] = 0.25; // Ecke, doppelt geschnitten
        } else {
          grid[plattenY - 1][x] = 0.5; // markiere als geschnitten
          geschnittene++;
        }
      }
    }
    
    setPlattenGrid(grid);
    setPlattenAnzahl(anzahlPlatten);
    setGeschnittenePlatten(geschnittene);
    setPlattenAnzahlMitVerschnitt(Math.ceil(anzahlPlatten * (1 + verschnitt / 100)));
    
    // Randsteine berechnen, wenn gewünscht
    if (mitRandsteinen) {
      // Nur den Umfang der Seiten mit Randsteinen verwenden
      const anzahlRandsteine = Math.ceil(randsteinUmfang / randsteinLaengeM);
      const randsteinVerschnitt = Math.max(5, verschnitt / 2);
      const anzahlMitVerschnitt = Math.ceil(anzahlRandsteine * (1 + randsteinVerschnitt / 100));
      
      setRandsteineAnzahl(anzahlRandsteine);
      setRandsteineAnzahlMitVerschnitt(anzahlMitVerschnitt);
    } else {
      setRandsteineAnzahl(0);
      setRandsteineAnzahlMitVerschnitt(0);
    }
    
    setBerechnungAngefordert(false);
  };
  
  // Automatische oder manuelle Berechnung
  useEffect(() => {
    if (!manuelleBerechnung || berechnungAngefordert) {
      berechnen();
    }
  }, [laenge, breite, plattenLaenge, plattenBreite, fugenBreite, mitRandsteinen, 
      randsteinLaenge, verschnitt, manuelleBerechnung, berechnungAngefordert,
      randLinks, randRechts, randOben, randUnten]);
  
  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6 text-center">Terrassenrechner für Galabauer</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Eingaben */}
        <Card>
          <CardHeader>
            <CardTitle>Terrassenmaße</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <label className="block mb-1 font-medium">Länge (cm)</label>
                <input 
                  type="number" 
                  min="50" 
                  step="10" 
                  value={laenge} 
                  onChange={(e) => setLaenge(Number(e.target.value))}
                  className="w-full p-2 border rounded"
                />
              </div>
              <div>
                <label className="block mb-1 font-medium">Breite (cm)</label>
                <input 
                  type="number" 
                  min="50" 
                  step="10" 
                  value={breite} 
                  onChange={(e) => setBreite(Number(e.target.value))}
                  className="w-full p-2 border rounded"
                />
              </div>
              
              <div className="p-3 bg-gray-50 rounded">
                <p className="font-medium text-sm mb-2">Terrassenplatten:</p>
                <div className="mb-2">
                  <label className="block mb-1 text-sm">Plattenlänge (cm)</label>
                  <input 
                    type="number" 
                    min="10" 
                    step="1" 
                    value={plattenLaenge} 
                    onChange={(e) => setPlattenLaenge(Number(e.target.value))}
                    className="w-full p-2 border rounded"
                  />
                </div>
                <div className="mb-2">
                  <label className="block mb-1 text-sm">Plattenbreite (cm)</label>
                  <input 
                    type="number" 
                    min="10" 
                    step="1" 
                    value={plattenBreite} 
                    onChange={(e) => setPlattenBreite(Number(e.target.value))}
                    className="w-full p-2 border rounded"
                  />
                </div>
                <div>
                  <label className="block mb-1 text-sm">Fugenbreite (mm)</label>
                  <input 
                    type="number" 
                    min="1" 
                    step="1" 
                    value={fugenBreite} 
                    onChange={(e) => setFugenBreite(Number(e.target.value))}
                    className="w-full p-2 border rounded"
                  />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        {/* Weitere Optionen */}
        <Card>
          <CardHeader>
            <CardTitle>Optionen</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center">
                <input 
                  type="checkbox" 
                  id="mitRandsteinen" 
                  checked={mitRandsteinen} 
                  onChange={() => setMitRandsteinen(!mitRandsteinen)}
                  className="mr-2"
                />
                <label htmlFor="mitRandsteinen" className="text-sm font-medium">
                  Mit Randsteinen/Einfassung
                </label>
              </div>
              
              {mitRandsteinen && (
                <div className="p-3 bg-amber-50 rounded">
                  <p className="font-medium text-sm mb-2">Randsteine:</p>
                  <div className="mb-4">
                    <label className="block mb-1 text-sm">Länge (cm)</label>
                    <input 
                      type="number" 
                      min="10" 
                      step="1" 
                      value={randsteinLaenge} 
                      onChange={(e) => setRandsteinLaenge(Number(e.target.value))}
                      className="w-full p-2 border rounded"
                    />
                  </div>
                  
                  <p className="font-medium text-sm mb-2">Randsteine an folgenden Seiten:</p>
                  <div className="grid grid-cols-2 gap-2">
                    <div className="flex items-center">
                      <input 
                        type="checkbox" 
                        id="randLinks" 
                        checked={randLinks} 
                        onChange={() => setRandLinks(!randLinks)}
                        className="mr-2"
                      />
                      <label htmlFor="randLinks" className="text-sm">Links</label>
                    </div>
                    <div className="flex items-center">
                      <input 
                        type="checkbox" 
                        id="randRechts" 
                        checked={randRechts} 
                        onChange={() => setRandRechts(!randRechts)}
                        className="mr-2"
                      />
                      <label htmlFor="randRechts" className="text-sm">Rechts</label>
                    </div>
                    <div className="flex items-center">
                      <input 
                        type="checkbox" 
                        id="randOben" 
                        checked={randOben} 
                        onChange={() => setRandOben(!randOben)}
                        className="mr-2"
                      />
                      <label htmlFor="randOben" className="text-sm">Oben</label>
                    </div>
                    <div className="flex items-center">
                      <input 
                        type="checkbox" 
                        id="randUnten" 
                        checked={randUnten} 
                        onChange={() => setRandUnten(!randUnten)}
                        className="mr-2"
                      />
                      <label htmlFor="randUnten" className="text-sm">Unten</label>
                    </div>
                  </div>
                </div>
              )}
              
              <div>
                <label className="block mb-1 font-medium">Verschnitt (%)</label>
                <div className="flex items-center">
                  <input 
                    type="range" 
                    min="0" 
                    max="20" 
                    step="1" 
                    value={verschnitt} 
                    onChange={(e) => setVerschnitt(Number(e.target.value))}
                    className="w-full mr-2"
                  />
                  <span>{verschnitt}%</span>
                </div>
              </div>
              
              <div className="flex mt-4 items-center">
                <input 
                  type="checkbox" 
                  id="manuelleBerechnung" 
                  checked={manuelleBerechnung} 
                  onChange={() => setManuelleBerechnung(!manuelleBerechnung)}
                  className="mr-2"
                />
                <label htmlFor="manuelleBerechnung" className="text-sm font-medium">
                  Manuelle Berechnung
                </label>
              </div>
              
              <button 
                onClick={() => setBerechnungAngefordert(true)} 
                className="mt-4 w-full p-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                disabled={!manuelleBerechnung}
              >
                Berechnen
              </button>
            </div>
          </CardContent>
        </Card>
      </div>
      
      {/* Ergebnisse */}
      <Card className="bg-blue-50 mb-6">
        <CardHeader>
          <CardTitle>Berechnete Ergebnisse</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <div className="flex justify-between p-2 bg-white rounded shadow">
                <span className="font-medium">Terrassen-Fläche:</span>
                <span>{flaeche.toFixed(2)} m²</span>
              </div>
              <div className="flex justify-between p-2 bg-white rounded shadow">
                <span className="font-medium">Gesamt-Umfang:</span>
                <span>{umfang.toFixed(2)} m</span>
              </div>
              {mitRandsteinen && (
                <div className="flex justify-between p-2 bg-white rounded shadow">
                  <span className="font-medium">Randstein-Umfang:</span>
                  <span>
                    {(
                      (randLinks ? breite/100 : 0) + 
                      (randRechts ? breite/100 : 0) + 
                      (randOben ? laenge/100 : 0) + 
                      (randUnten ? laenge/100 : 0)
                    ).toFixed(2)} m
                  </span>
                </div>
              )}
              <div className="flex justify-between p-2 bg-white rounded shadow">
                <span className="font-medium">Plattenmaße:</span>
                <span>{plattenLaenge} × {plattenBreite} cm</span>
              </div>
              <div className="flex justify-between p-2 bg-white rounded shadow">
                <span className="font-medium">Platten (netto):</span>
                <span>{plattenAnzahl} Stück</span>
              </div>
              <div className="flex justify-between p-2 bg-white rounded shadow">
                <span className="font-medium">Davon geschnitten:</span>
                <span>{geschnittenePlatten} Stück</span>
              </div>
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between p-2 bg-white rounded shadow font-bold">
                <span>Platten inkl. {verschnitt}% Verschnitt:</span>
                <span>{plattenAnzahlMitVerschnitt} Stück</span>
              </div>
              
              {mitRandsteinen && (
                <>
                  <div className="flex justify-between p-2 bg-white rounded shadow">
                    <span className="font-medium">Randsteine (netto):</span>
                    <span>{randsteineAnzahl} Stück</span>
                  </div>
                  <div className="flex justify-between p-2 bg-white rounded shadow">
                    <span className="font-medium">Randsteine inkl. Verschnitt:</span>
                    <span>{randsteineAnzahlMitVerschnitt} Stück</span>
                  </div>
                </>
              )}
            </div>
          </div>
          
          <div className="mt-4 flex items-start p-3 bg-yellow-50 border border-yellow-200 rounded">
            <Info className="text-yellow-500 mr-2 flex-shrink-0 mt-1" size={20} />
            <p className="text-sm">
              Die berechneten Werte dienen als Richtwerte. Die Visualisierung zeigt, wo Platten geschnitten werden müssen 
              (gelb markiert). Für komplexe Formen oder spezielle Verlegemuster empfiehlt sich eine detailliertere Planung.
            </p>
          </div>
        </CardContent>
      </Card>
      
      {/* Visualisierung */}
      <Card>
        <CardHeader>
          <CardTitle>Visualisierung</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-100 p-4 rounded border relative" style={{ height: '300px' }}>
            <div className="absolute inset-0 flex items-center justify-center">
              <div 
                style={{ 
                  width: `${Math.min(laenge * 0.5, 250)}px`, 
                  height: `${Math.min(breite * 0.5, 200)}px`, 
                  position: 'relative',
                  backgroundColor: '#f5f5f5'
                }}
              >
                {/* Plattengrid für Visualisierung - mit korrektem Seitenverhältnis */}
                <div style={{ 
                  position: 'absolute', 
                  top: 0, 
                  left: 0,
                  width: '100%',
                  height: '100%',
                  overflow: 'hidden' // Wichtig: Überschüssige Platten abschneiden
                }}>
                  {plattenGrid.map((row, rowIndex) => (
                    <div key={rowIndex} style={{ 
                      display: 'flex', 
                      height: `${Math.min((breite / plattenGrid.length) * 0.5, 200 / plattenGrid.length)}px` 
                    }}>
                      {row.map((cell, cellIndex) => {
                        // Berechne das tatsächliche Seitenverhältnis jeder Platte
                        const cellWidth = Math.min((laenge / row.length) * 0.5, 250 / row.length);
                        const cellHeight = Math.min((breite / plattenGrid.length) * 0.5, 200 / plattenGrid.length);
                        
                        // Berechnung der Abmessungen basierend auf den Plattenproportionen
                        // Statt aspectRatio zu verwenden
                        const ratio = plattenLaenge / plattenBreite;
                        const adjustedWidth = ratio > 1 ? cellWidth : cellWidth * (plattenLaenge / plattenBreite);
                        const adjustedHeight = ratio < 1 ? cellHeight : cellHeight * (plattenBreite / plattenLaenge);
                        
                        return (
                          <div 
                            key={cellIndex} 
                            style={{
                              width: `${adjustedWidth}px`,
                              height: `${adjustedHeight}px`,
                              backgroundColor: cell === 1 ? '#e6c08f' : 
                                             cell === 0.5 ? '#ffd700' : 
                                             cell === 0.25 ? '#ff6347' : 'transparent',
                              border: '1px solid rgba(0,0,0,0.2)',
                              boxSizing: 'border-box'
                            }}
                          />
                        );
                      })}
                    </div>
                  ))}
                </div>
                
                {/* Randsteine separat darstellen */}
                {mitRandsteinen && randOben && (
                  <div style={{ 
                    position: 'absolute', 
                    top: '-8px', 
                    left: randLinks ? '-8px' : '0', 
                    right: randRechts ? '-8px' : '0',
                    height: '8px', 
                    backgroundColor: '#a1a1a1'
                  }}></div>
                )}
                
                {mitRandsteinen && randUnten && (
                  <div style={{ 
                    position: 'absolute', 
                    bottom: '-8px', 
                    left: randLinks ? '-8px' : '0', 
                    right: randRechts ? '-8px' : '0',
                    height: '8px', 
                    backgroundColor: '#a1a1a1'
                  }}></div>
                )}
                
                {mitRandsteinen && randLinks && (
                  <div style={{ 
                    position: 'absolute', 
                    left: '-8px', 
                    top: randOben ? '-8px' : '0', 
                    bottom: randUnten ? '-8px' : '0',
                    width: '8px', 
                    backgroundColor: '#a1a1a1'
                  }}></div>
                )}
                
                {mitRandsteinen && randRechts && (
                  <div style={{ 
                    position: 'absolute', 
                    right: '-8px', 
                    top: randOben ? '-8px' : '0', 
                    bottom: randUnten ? '-8px' : '0',
                    width: '8px', 
                    backgroundColor: '#a1a1a1'
                  }}></div>
                )}
              </div>
            </div>
            
            {/* Maßstabsleiste */}
            <div className="absolute bottom-2 left-2 flex items-center">
              <div className="h-4 w-20 bg-black"></div>
              <span className="ml-2 text-xs">1m</span>
            </div>
            
            {/* Legende */}
            <div className="absolute top-2 right-2 bg-white p-2 rounded border text-xs">
              <div className="flex items-center mb-1">
                <div className="w-4 h-4 mr-2" style={{ backgroundColor: '#e6c08f' }}></div>
                <span>Ganze Platten</span>
              </div>
              <div className="flex items-center mb-1">
                <div className="w-4 h-4 mr-2" style={{ backgroundColor: '#ffd700' }}></div>
                <span>Einfach geschnittene Platten</span>
              </div>
              <div className="flex items-center mb-1">
                <div className="w-4 h-4 mr-2" style={{ backgroundColor: '#ff6347' }}></div>
                <span>Doppelt geschnittene Platten</span>
              </div>
              {mitRandsteinen && (
                <div className="flex items-center">
                  <div className="w-4 h-4 mr-2" style={{ backgroundColor: '#a1a1a1' }}></div>
                  <span>Randsteine</span>
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default TerrassenRechner;
